;;; init -- Custom Emacs Configuration.
;;; P.C. Shyamshankar "sykora" <sykora@lucentbeing.com>

;;;; Scaffolding
;;; Macros
(defmacro set! (variable value)
  "Set `VARIABLE' to `VALUE' using an appropriate method.
If `VARIABLE' is customizable, use `customize-set-variable' to
invoke any special on-set code. Otherwise, use `set'."
  (if (custom-variable-p variable)
      `(customize-set-variable ',variable ,value)
    `(set ',variable ,value)))

(defalias 'set* 'setq)

(defmacro with-load (feature &rest body)
  "Same as `with-eval-after-load'."
  (declare (indent defun))
  `(with-eval-after-load ',feature ,@body))

(defmacro with-load! (feature &rest body)
  "Load `FEATURE', and run `BODY' if successful."
  (declare (indent defun))
  `(when (require ',feature)
     ,@body))

(defmacro with-hook (hook &rest body)
  "When `HOOK' is called, execute `BODY'."
  (declare (indent 1))
  `(add-hook ',hook (lambda () (progn ,@body)) t))

(defmacro with-init (feature &rest body)
  (declare (indent defun))
  `(with-hook after-init-hook
     (with-load ,feature
       ,@body)))

(defmacro with-init! (feature &rest body)
  (declare (indent defun))
  `(with-hook after-init-hook
     (with-load! ,feature ,@body)))

(defmacro with-init? (feature &rest body)
  (declare (indent defun))
  `(with-hook after-init-hook
     (when (locate-library (symbol-name ',feature))
       ,@body)))

;;;; Constants
(defconst instance-name
  (if (daemonp)
      (daemonp)
    (format "emacs_%d" (emacs-pid)))
  "Unique name of the current emacs instance.
Defaults to `server-name' if present, generated by PID otherwise.")

;;;; Core editor configuration
;;; Package Management
(with-load emacs
  (with-load! package
    (set! package-user-dir (concat user-emacs-directory "elpa"))
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/")))

  (defvar user-lisp-directory (concat user-emacs-directory "lisp/"))
  (add-to-list 'load-path user-lisp-directory)

  (defvar user-theme-directory (concat user-lisp-directory "themes/"))
  (add-to-list 'custom-theme-load-path user-theme-directory)

  (set! custom-file (concat user-lisp-directory "customizations.el"))

  (set! ad-redefinition-action 'accept)

  (with-init emacs
    (require 'local-autoloads))

  (when (file-exists-p custom-file)
      (load custom-file)))

;;; Look and Feel
(with-init emacs
  (set-frame-font "Pragmata Pro-10")
  (set! default-frame-alist '((font . "Pragmata Pro-10")))

  (set! frame-title-format '("emacs" (:eval (format "@%s" instance-name)) ": %b"))

  (set! inhibit-splash-screen t)

  ;; Disable a bunch of eye-candy.
  (blink-cursor-mode -1)
  (column-number-mode)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)

  ;; The fringe is still useful, keep it to two-character width on the right.
  (fringe-mode '(8 . 0))

  (set! scroll-step 1)

  ;; Load the theme.
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (load-theme 'skywave-gui))))
    (load-theme 'skywave-gui))

  (defalias 'yes-or-no-p 'y-or-n-p)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)

  (global-visual-line-mode t))

;; Default Text Settings
(with-init emacs
  (set! fill-column 100)

  (set! indent-tabs-mode nil)
  (set! tab-width 2)

  (with-hook prog-mode-hook
    (set* show-trailing-whitespace t))

  (set! sentence-end-double-space nil))

;; Files
(with-load emacs
  ;; Backups
  (set! backup-by-copying t)
  (set! backup-directory-alist `(("." . ,(concat user-emacs-directory "backups/"))))
  (set! delete-old-versions t)
  (set! kept-new-versions 6)
  (set! kept-old-versions 2)
  (set! version-control t)

  ;; Auto-Saves
  (set! auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory "auto-saves/") t))))

;;;; Major Modes
;;; Detection
(with-load emacs
  (add-to-list 'auto-mode-alist '("\\.k3" . K3-mode))
  (add-to-list 'auto-mode-alist '("\\.ldg" . ledger-mode))
  (add-to-list 'auto-mode-alist '("\\.md" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.ya?ml" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.zsh" . sh-mode)))

;; Calc
(with-init? calc
  (with-load evil-leader
    (evil-leader/set-key "*" 'calc-dispatch)))

;; C-Common
(with-init cc-mode
  (set! c-basic-offset 2)
  (c-set-offset 'access-label '/))

(with-init c++-mode
  (with-load flycheck
    (set! flycheck-clang-language-standard "c++1y")))

;; EDiff
(with-load ediff
  (set! ediff-window-setup-function 'ediff-setup-windows-plain)
  (set! ediff-split-window-function 'split-window-horizontally))

;; Emacs-Lisp
(with-init lisp-mode
  (with-hook emacs-lisp-mode-hook
    (turn-on-eldoc-mode)

    (font-lock-add-keywords nil '(("(\\(\\<set[cq]\\)" 1 'font-lock-keyword-face)))
    (font-lock-add-keywords nil '(("(\\(\\<defhydra\\>\\)" 1 'font-lock-keyword-face)))
    (font-lock-add-keywords nil '(("(\\(\\<with-load\\>\\)" 1 'font-lock-keyword-face)))
    (font-lock-add-keywords nil '(("(\\(\\<with-hook\\>\\)" 1 'font-lock-keyword-face)))
    (font-lock-add-keywords nil '(("(\\(\\<with-init\\>\\)" 1 'font-lock-keyword-face)))))

;;; Haskell
(with-init haskell-mode
  (with-hook haskell-mode-hook
    (haskell-decl-scan-mode t)
    (haskell-doc-mode t)
    (haskell-indentation-mode t)

    (diminish 'haskell-doc-mode)
    (diminish 'haskell-indentation-mode)

    ;; Only show indentation markers when in insert mode.
    (with-load evil
      (with-hook evil-insert-state-entry-hook
	(when (eq major-mode 'haskell-mode)
	  (haskell-indentation-enable-show-indentations)))
      (with-hook evil-insert-state-exit-hook
	(when (eq major-mode 'haskell-mode)
	  (haskell-indentation-disable-show-indentations))))

    (face-remap-add-relative 'font-lock-doc-face 'font-lock-comment-face))

  (with-load haskell-doc-mode
    (with-load diminish
      (diminish 'haskell-doc-mode)))

  (with-load haskell-indentation-mode
    (with-load diminish
      (diminish 'haskell-indentation-mode))))

(with-init tex
  ;; Compilation Settings
  (with-load! auctex-latexmk
    (auctex-latexmk-setup)

    (defun TeX-latexmk ()
      (interactive)
      (TeX-command "LatexMk" 'TeX-master-file -1))

    (with-load reftex
      (with-load hydra
        (defhydra latex-hydra (:color blue :idle 1.0)
          "
LaTeX Control
-------------
{_c_} Compile
{_v_} View
"
          ("c" TeX-latexmk)
          ("v" TeX-view)
          ("i" reftex-toc))

        (with-load evil-leader
          (evil-leader/set-key-for-mode 'latex-mode "m" 'latex-hydra/body)))))

  ;; General Look and Feel
  (with-hook LaTeX-mode-hook
    (auto-fill-mode))

  (set! font-latex-fontify-sectioning 'color)

  (set! LaTeX-indent-level 2)
  (set! LaTeX-item-indent 0)

  (set! LaTeX-verbatim-environments-local '("Verbatim"))

  (set! TeX-newline-function 'reindent-then-newline-and-indent)

  (add-to-list 'LaTeX-indent-environment-list '("minted" current-indentation))

  (with-load! alist-utils
    (with-load! TeX-indent-item-continuation
      (upsert-alist "enumerate" '(LaTeX-indent-item) LaTeX-indent-environment-list)
      (upsert-alist "description" '(LaTeX-indent-item) LaTeX-indent-environment-list)
      (upsert-alist "itemize" '(LaTeX-indent-item) LaTeX-indent-environment-list)))

  ;; Syntax Checking
  (with-load flycheck
    (set! flycheck-chktexrc (expand-file-name "~/.chktexrc")))

  ;; PDF Viewer Settings.
  (add-to-list 'TeX-expand-list `("%i" (lambda () instance-name)))
  (add-to-list 'TeX-view-program-list '("QPDFView"
    ("qpdfview --unique --instance %i %o" (mode-io-correlate "#src:%b:%n:1"))))
  (setcdr (assoc 'output-pdf TeX-view-program-selection) '("QPDFView"))

  ;; SyncTeX Settings
  (TeX-source-correlate-mode t)
  (set! TeX-source-correlate-method 'synctex)

  ;; Refocus emacs after viewing document. Compensates for QPDFView stealing focus but not mouse.
  (advice-add 'TeX-view :after (lambda () (x-focus-frame nil)))

  ;; RefTeX
  (with-load reftex
    (set! reftex-plug-into-AUCTeX t)

    (with-hook LaTeX-mode-hook
      (turn-on-reftex)))

  (with-load reftex-toc
    (define-key reftex-toc-map (kbd "e") 'reftex-toc-next)
    (define-key reftex-toc-map (kbd "i") 'reftex-toc-previous)))

;; Ledger
(with-init? ledger-mode
  (set! ledger-clear-whole-transactions t)
  (set! ledger-post-amount-alignment-column 80)
  (set! ledger-reconcile-default-commodity "USD")
  (set! ledger-reports
       '(("account" "ledger -f %(ledger-file) register %(account)")
         ("balance" "ledger -f %(ledger-file) balance")
         ("payee" "ledger -f %(ledger-file) register @%(payee)")
         ("register" "ledger -f %(ledger-file) register")))

  ; Not really specific to ledger, but close enough.
  (set! pcomplete-termination-string "")

  (with-load evil
    (evil-set-initial-state 'ledger-report-mode 'emacs))

  (with-load evil-leader
    (evil-leader/set-key-for-mode 'ledger-mode "mq" 'ledger-post-align-xact)
    (evil-leader/set-key-for-mode 'ledger-mode "mr" 'ledger-report))

  (with-load! flycheck-ledger
    (set! flycheck-ledger-pedantic t)))

;;; Org
(with-init? org
  (with-load hydra
    (defhydra org-hydra (:color blue :hint nil :idle 1.0)
      "
Org-Mode Control
----------------
{_a_} Agenda  | {_j_} Jump to Clock
{_c_} Capture
{_q_} Quit
"
      ("a" org-agenda)
      ("c" org-capture)
      ("j" org-clock-goto)
      ("q" nil)))

    (with-load evil-leader
      (evil-leader/set-key "o" 'org-hydra/body))

  (set! org-emphasis-alist
        '(("*" org-bold)
          ("/" org-italic)
          ("_" org-underline)
          ("`" org-verbatim verbatim)
          ("~" org-code verbatim)
          ("+" (:strike-through t))
          ("$" org-math))))

(with-init org
  ;; Directories and Files
  (set! org-directory "~/org/")
  (set! org-agenda-files '("~/org/staging.org" "~/org/agenda"))

  ;; Agenda
  (setq org-agenda-custom-commands
        '(("o" "Obligations"
           ((agenda "")
            (tags-todo "obligation" ((org-agenda-overriding-header "Obligations")))
            (tags-todo "research" ((org-agenda-overriding-header "Research")))))))

  (with-hook org-agenda-mode-hook
    (hl-line-mode))

  (set! org-agenda-span 14)
  (set! org-agenda-start-on-weekday nil)

  ;; Appearance
  (set! org-ellipsis "…")
  (set! org-list-description-max-indent 5)

  (set! org-adapt-indentation nil)

  (with-hook org-mode-hook
    (auto-fill-mode t))

  (defface org-bold
    (org-compatible-face nil '((t (:bold t))))
    "Face for bold text."
    :group 'org-faces)

  (defface org-italic
    (org-compatible-face nil '((t (:italic t))))
    "Face for italicized text."
    :group 'org-faces)

  (defface org-underline
    (org-compatible-face nil '((t (:underline t))))
    "Face for underlined text."
    :group 'org-faces)

  (defface org-math
    (org-compatible-face nil '((t (:foreground "#00CCFF"))))
    "Face for inline math."
    :group 'org-faces)

  (defface org-verbatim
    (org-compatible-face nil '((t (:foreground "#FFCC00"))))
    "Face for inline math."
    :group 'org-faces)


  ;; Applications
  (set! org-file-apps `((auto-mode . emacs)
                        ("\\.djvu::\\([0-9]+\\)" . ,(format "qpdfview --unique --instance %s %%s#%%1" instance-name))
                        ("\\.djvu" . ,(format "qpdfview --unique --instance %s %%s" instance-name))
                        ("\\.pdf::\\([0-9]+\\)" . ,(format "qpdfview --unique --instance %s %%s#%%1" instance-name))
                        ("\\.pdf" . ,(format "qpdfview --unique --instance %s %%s" instance-name))
                        ("\\.ps" . ,(format "qpdfview --unique --instance %s %%s" instance-name))))

  ;; Attachments
  (set! org-attach-auto-tag "@")
  (set! org-attach-file-list-property "ATTACHMENTS")

  ;; Capture
  (set! org-capture-templates
       `(("a" "Appointment" entry (file+headline ,(concat org-directory "agenda/schedule.org") "Impromptu")
          "* %^{Subject}\n%^T\n%?" :kill-buffer t :prepend t)
         ("i" "Idea" entry (file+headline ,(concat org-directory "staging.org") "Ideas")
          "* %^{Subject}\n%?" :kill-buffer t :prepend t)
         ("l" "Link" entry (file+headline ,(concat org-directory "staging.org") "Links")
          "* %^{Description}: [[%x]]\n" :kill-buffer t :immediate-finish t)
         ("n" "Note" entry (file+headline ,(concat org-directory "staging.org") "Notes")
          "* %^{Subject}\n%?" :kill-buffer t :prepend t)
         ("t" "Task" entry (file+headline (concat org-directory "staging.org") "Tasks")
          "* TODO %?" :kill-buffer t :prepend t)))

  ;; Clocking and Effort
  (set! org-effort-property "EFFORT")

  ;; Keys
  (with-load evil
    (evil-define-key 'normal org-mode-map "\M-n" 'org-metaleft)
    (evil-define-key 'normal org-mode-map "\M-e" 'org-metadown)
    (evil-define-key 'normal org-mode-map "\M-i" 'org-metaup)
    (evil-define-key 'normal org-mode-map "\M-o" 'org-metaright)

    (evil-define-key 'normal org-mode-map "\S-n" 'org-shiftleft)
    (evil-define-key 'normal org-mode-map "\S-e" 'org-shiftdown)
    (evil-define-key 'normal org-mode-map "\S-i" 'org-shiftup)
    (evil-define-key 'normal org-mode-map "\S-o" 'org-shiftright)

    (evil-define-key 'insert org-mode-map "\M-n" 'org-metaleft)
    (evil-define-key 'insert org-mode-map "\M-e" 'org-metadown)
    (evil-define-key 'insert org-mode-map "\M-i" 'org-metaup)
    (evil-define-key 'insert org-mode-map "\M-o" 'org-metaright)

    (evil-define-key 'normal org-mode-map "\M-\S-n" 'org-shiftmetaleft)
    (evil-define-key 'normal org-mode-map "\M-\S-e" 'org-shiftmetadown)
    (evil-define-key 'normal org-mode-map "\M-\S-i" 'org-shiftmetaup)
    (evil-define-key 'normal org-mode-map "\M-\S-o" 'org-shiftmetaright)

    (evil-define-key 'emacs org-agenda-mode-map "e" 'org-agenda-next-item)
    (evil-define-key 'emacs org-agenda-mode-map "i" 'org-agenda-previous-item)

    (with-load org-open-heading
      (evil-define-key 'normal org-mode-map "\M-y" 'org-open-heading-below-and-insert)
      (evil-define-key 'normal org-mode-map "\M-Y" 'org-open-heading-above-and-insert)))

  ;; Source Code
  (set! org-edit-src-indentation 0)
  (set! org-src-fontify-natively t)

  ;; Tags
  (set! org-agenda-tags-column -100)
  (set! org-tags-column -100)

  (defun org-tags-attachment-last (x y)
    (if (string= org-attach-auto-tag x) nil
      (if (string= org-attach-auto-tag y) t
        (string< x y))))

  (set! org-tags-sort-function 'org-tags-attachment-last))

;;;; Minor Modes and Third-Party Packages
(with-load bibtex
  (set! bibtex-dialect 'BibTeX))

;; Comments
(with-init? comment-dwim-toggle
  (with-load evil-leader
    (evil-leader/set-key "c" 'comment-dwim-toggle)))

;;; Compilation
(with-init? compile
  (set! compilation-scroll-output t))

(with-init? compilation-manager
  (with-load hydra
    (defhydra compilation-hydra (:idle 1.0 :color blue :hint nil)
      "
Compilation Control
───────────────────────────────────────────────────────────────────────
 {_c_} Compile   | {_p_} Compile Profile | {_s_} Toggle Skip Threshold
 {_r_} Recompile | {_n_} Name Profile    |
 {_k_} Kill      |
 {_b_} Raise     |
───────────────────────────────────────────────────────────────────────
 {_q_} Quit
"
      ("c" compile)
      ("r" recompile)
      ("k" kill-compilation)
      ("b" (switch-to-buffer "*compilation*"))

      ("p" compilation-manager-run-profile)
      ("n" compilation-manager-name-last-profile)

      ("s" compilation-set-skip-threshold)
      ("q" nil))
    (with-load evil-leader
      (evil-leader/set-key "r" 'compilation-hydra/body))))

;;; Evil
(with-init! evil
  (evil-mode t)

  (set! evil-move-beyond-eol t)
  (set! evil-want-fine-undo nil)

  (define-key evil-normal-state-map (kbd "q") nil)
  (define-key evil-normal-state-map (kbd "Q") 'evil-record-macro)

  ;; Cursor Movement
  (define-key evil-normal-state-map (kbd "n") 'evil-backward-char)
  (define-key evil-normal-state-map (kbd "e") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "i") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "o") 'evil-forward-char)

  (define-key evil-motion-state-map (kbd "n") 'evil-backward-char)
  (define-key evil-motion-state-map (kbd "e") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "i") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "o") 'evil-forward-char)

  (define-key evil-visual-state-map (kbd "n") 'evil-backward-char)
  (define-key evil-visual-state-map (kbd "e") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "i") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "o") 'evil-forward-char)

  ;; Window Movement
  (define-key evil-window-map (kbd "n") 'evil-window-left)
  (define-key evil-window-map (kbd "e") 'evil-window-down)
  (define-key evil-window-map (kbd "i") 'evil-window-up)
  (define-key evil-window-map (kbd "o") 'evil-window-right)

  (define-key evil-window-map (kbd "C-n") 'evil-window-left)
  (define-key evil-window-map (kbd "C-e") 'evil-window-down)
  (define-key evil-window-map (kbd "C-i") 'evil-window-up)
  (define-key evil-window-map (kbd "C-o") 'evil-window-right)

  (define-key evil-window-map (kbd "q") 'evil-window-delete)
  (define-key evil-window-map (kbd "d") 'delete-other-windows)
  (define-key evil-window-map (kbd "D") 'delete-other-windows-vertically)

  (define-key evil-window-map (kbd "u") 'winner-undo)
  (define-key evil-window-map (kbd "U") 'winner-redo)

  ;; Entering Insert Mode
  (define-key evil-normal-state-map (kbd "h") 'evil-insert-state)
  (define-key evil-normal-state-map (kbd "H") 'evil-insert-line)
  (define-key evil-normal-state-map (kbd "a") 'evil-append)
  (define-key evil-normal-state-map (kbd "A") 'evil-append-line)
  (define-key evil-normal-state-map (kbd "y") 'evil-open-below)
  (define-key evil-normal-state-map (kbd "Y") 'evil-open-above)

  ;; Copying and Pasting
  (define-key evil-normal-state-map (kbd "k") 'evil-yank)
  (define-key evil-normal-state-map (kbd "m") 'evil-paste-after)
  (define-key evil-normal-state-map (kbd "M") 'evil-paste-before)

  (define-key evil-visual-state-map (kbd "k") 'evil-yank)
  (define-key evil-visual-state-map (kbd "m") 'evil-paste-after)
  (define-key evil-visual-state-map (kbd "M") 'evil-paste-before)

  ;; Text-Objects and Motions
  (define-key evil-visual-state-map (kbd "y") 'evil-visual-exchange-corners)
  (define-key evil-visual-state-map (kbd "h") evil-inner-text-objects-map)
  (define-key evil-operator-state-map (kbd "h") evil-inner-text-objects-map)

  ;; Search
  (define-key evil-normal-state-map (kbd "t") 'evil-search-next)
  (define-key evil-normal-state-map (kbd "T") 'evil-search-previous)
  (define-key evil-motion-state-map (kbd "t") 'evil-search-next)
  (define-key evil-motion-state-map (kbd "T") 'evil-search-previous)

  (define-prefix-command 'evil-utility-map)
  (define-key evil-normal-state-map (kbd "s") evil-utility-map)

  ;; Miscellaneous -- the `s'-map is my `g'-map.
  (define-key evil-utility-map (kbd "v") 'evil-visual-restore)
  (define-key evil-normal-state-map (kbd "sff") 'ffap)
  (define-key evil-normal-state-map (kbd "sfo") 'ffap-other-window)

  ;; Inject window movement keys into emacs state.
  (define-key evil-emacs-state-map (kbd "C-w") evil-window-map))

;; Evil-Args
(with-init? evil-args
  (with-load evil
    (define-key evil-inner-text-objects-map (kbd ",") 'evil-inner-arg)
    (define-key evil-outer-text-objects-map (kbd ",") 'evil-outer-arg)

    (define-key evil-normal-state-map (kbd "],") 'evil-forward-arg)
    (define-key evil-normal-state-map (kbd "[,") 'evil-backward-arg)
    (define-key evil-motion-state-map (kbd "],") 'evil-forward-arg)
    (define-key evil-motion-state-map (kbd "[,") 'evil-backward-arg)))

(with-init evil-args
  (add-to-list 'evil-args-openers "<")
  (add-to-list 'evil-args-closers ">")
  (add-to-list 'evil-args-delimiters ";"))

;; Evil-Exchange
(with-init? evil-exchange
  (with-load evil
    (define-key evil-normal-state-map (kbd "sx") 'evil-exchange)
    (define-key evil-visual-state-map (kbd "sx") 'evil-exchange)
    (define-key evil-normal-state-map (kbd "sX") 'evil-exchange-cancel)
    (define-key evil-visual-state-map (kbd "sX") 'evil-exchange-cancel)))

(with-init? evil-exchange-args
  (with-load evil
    (define-key evil-normal-state-map (kbd "sw") 'evil-exchange-forward-arg)
    (define-key evil-normal-state-map (kbd "sW") 'evil-exchange-backward-arg)))

;;; Evil-Leader
(with-init! evil-leader
  (global-evil-leader-mode t)
  (evil-leader/set-leader "SPC")

  ;; Ugly hack to force the messages buffer to accept evil-leader.
  (kill-buffer "*Messages*")

  (with-load hydra
    (defhydra buffer-hydra (:color blue :idle 1.0 :hint nil)
      "
Buffer Control
───────────────────────────
{_l_} List     | {_b_} Bury
{_o_} Previous | {_k_} Kill
───────────────────────────
{_q_} Quit
"
      ("l" switch-to-buffer)
      ("o" evil-buffer)
      ("b" bury-buffer)
      ("k" kill-this-buffer)
      ("q" nil)))

  (evil-leader/set-key "b" 'buffer-hydra/body)

  (evil-leader/set-key "w" 'evil-window-map))

;; Evil-Surround
(with-init! evil-surround
  (global-evil-surround-mode t)
  (with-load evil
    (define-key evil-normal-state-map (kbd "js") 'evil-surround-region)
    (define-key evil-normal-state-map (kbd "jS") 'evil-surround-region)
    (define-key evil-visual-state-map (kbd "js") 'evil-surround-region)
    (define-key evil-visual-state-map (kbd "jS") 'evil-Surround-region)))

(with-init buffer-move
  (with-load evil
   (define-key evil-window-map (kbd "S-n") 'buf-move-left)
   (define-key evil-window-map (kbd "S-e") 'buf-move-down)
   (define-key evil-window-map (kbd "S-i") 'buf-move-up)
   (define-key evil-window-map (kbd "S-o") 'buf-move-right)))

;; ;; Company
;; (with-load company-autoloads
;;   (global-company-mode t)
;;   (with-load diminish
;;     (diminish 'company-mode)))

;; ;;;; Company
;; (with-load company
;;   (set! company-dabbrev-downcase nil)
;;   (set! company-dabbrev-ignore-case nil)
;;   (set! company-dabbrev-code-ignore-case nil)

;;   (with-load evil
;;     (define-key company-active-map (kbd "C-e") 'company-select-next)
;;     (define-key company-active-map (kbd "C-i") 'company-select-previous)))

;;   (with-load ansi-color
;;     (defun colorize-compilation-buffer ()
;;       (let ((inhibit-read-only t))
;;         (ansi-color-apply-on-region (point-min) (point-max))))
;;     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)))

;; Diminish
(with-init! diminish)

;; ;; Dired
;; (with-load dired
;;   (set! dired-dwim-target t)
;;   (set! dired-listing-switches "-alhD --group-directories-first")

;;   (add-to-list 'evil-emacs-state-modes 'dired-mode)

;;   (define-key dired-mode-map (kbd "e") 'dired-next-line)
;;   (define-key dired-mode-map (kbd "i") 'dired-previous-line))

;; Eldoc
(with-init eldoc
  (with-load diminish
    (diminish 'eldoc-mode)))

;; ;; EShell
;; (with-load eshell
;;   (defconst eshell-default-buffer-name "*eshell*")
;;   (defmacro eshell-buffer-name (name)
;;     `(format "%s: %s" ,eshell-default-buffer-name ,name))

;;   (defun get-or-create-eshell (name &optional directory)
;;     (if (get-buffer name)
;;         (switch-to-buffer name)
;;       (let ((default-directory (or directory default-directory)))
;;         (eshell name))
;;       (rename-buffer name)))

;;   (defun switch-to-eshell-dwim ()
;;     (interactive)
;;     (cond ((projectile-project-p)
;;            (get-or-create-eshell
;;             (eshell-buffer-name (projectile-project-name)) (projectile-project-p)))
;;           (t (get-or-create-eshell eshell-default-buffer-name))))

;;   (with-load evil-leader
;;     (evil-leader/set-key "pe" 'switch-to-eshell-dwim))

;;   (set! eshell-scroll-show-maximum-output nil)

;;   (with-hook 'eshell-mode-hook
;;     (evil-define-key 'insert eshell-mode-map (kbd "<return>") 'eshell-queue-input)))

;; ;; ETags
;; (with-load etags
;;   (with-load evil-leader
;;     (evil-leader/set-key "tb" 'pop-tag-mark)
;;     (evil-leader/set-key "tf" 'find-tag)))

;; ;; Expand-Region
;; (with-load expand-region-autoloads
;;   (with-load evil
;;     (define-key evil-visual-state-map (kbd ".") 'er/expand-region)))

;; ;; Ffap
;; (with-load ffap)

;; Flycheck
(with-init! flycheck
  (global-flycheck-mode 1)

  (with-load evil
    (add-to-list 'evil-emacs-state-modes 'flycheck-error-list-mode)

    (define-key flycheck-error-list-mode-map (kbd "e") 'flycheck-error-list-next-error)
    (define-key flycheck-error-list-mode-map (kbd "i") 'flycheck-error-list-previous-error))

  (with-load evil-leader
    (evil-leader/set-key "ke" 'flycheck-next-error)
    (evil-leader/set-key "ki" 'flycheck-previous-error)
    (evil-leader/set-key "kl" 'flycheck-list-errors)
    (evil-leader/set-key "kc" 'flycheck-buffer)))

;; ;; Help
;; (with-load help-fns+)

;; Ido*
(with-init! ido
  (ido-mode t)
  (ido-everywhere t)
  (ido-ubiquitous-mode t)

  (set! ido-auto-merge-work-directories-length -1)
  (set! ido-cannot-complete-command 'ido-next-match)

  ;; (define-key ido-completion-map (kbd "<tab>") 'ido-complete-space)
  ;; (define-key ido-completion-map (kbd "<backtab>") 'ido-prev-match)
  )

;; ;; Ido*
;; (with-load ido
;;   (ido-mode t)
;;   (ido-everywhere t)

;;   (set! ido-auto-merge-work-directories-length -1)
;;   (set! ido-cannot-complete-command 'ido-next-match)
;;   (set! ido-max-prospects 6)

;;   (with-load ido-ubiquitous-autoloads
;;     (ido-ubiquitous-mode t))

;;   (with-load ido-vertical-mode-autoloads
;;     (ido-vertical-mode t))

;;   (with-hook 'ido-setup-hook
;;     (define-key ido-completion-map (kbd "C-e") 'ido-next-match)
;;     (define-key ido-completion-map (kbd "C-i") 'ido-prev-match)
;;     (define-key ido-completion-map (kbd "C-o") 'ido-restrict-to-matches)

;;
;;     (define-key ido-completion-map (kbd "<backtab>") 'ido-prev-match)))

;; ;; IMenu
;; (with-load imenu
;;   (set! imenu-space-replacement "-")

;;   (with-load evil-leader
;;     (evil-leader/set-key "pm" 'imenu)))

;; Magit
(with-init? magit
  (with-load hydra
    (defhydra git-hydra (:idle 1.0)
      "
Git Control
-----------
{_b_} Blame
{_s_} Status
{_q_} Quit
"
      ("b" magit-blame :color blue)
      ("s" magit-status :color blue)
      ("q" nil)))

  (with-load evil-leader
    (evil-leader/set-key "g" 'git-hydra/body)))

(with-init magit
  (set! magit-push-always-verify nil)

  (with-load evil
    (evil-set-initial-state 'magit-popup-mode 'emacs)
    (evil-set-initial-state 'magit-popup-sequence-mode 'emacs)
    (evil-set-initial-state 'magit-process-mode 'emacs)
    (evil-set-initial-state 'magit-revision-mode 'emacs)

    (evil-define-key 'emacs magit-status-mode-map (kbd "n") 'evil-backward-char)
    (evil-define-key 'emacs magit-status-mode-map (kbd "e") 'evil-next-line)
    (evil-define-key 'emacs magit-status-mode-map (kbd "i") 'evil-previous-line)
    (evil-define-key 'emacs magit-status-mode-map (kbd "o") 'evil-forward-char)

    (evil-define-key 'emacs magit-status-mode-map (kbd "S-n") 'magit-section-backward-sibling)
    (evil-define-key 'emacs magit-status-mode-map (kbd "S-e") 'magit-section-forward)
    (evil-define-key 'emacs magit-status-mode-map (kbd "S-i") 'magit-section-backward)
    (evil-define-key 'emacs magit-status-mode-map (kbd "S-o") 'magit-section-forward-sibling)

    (evil-define-key 'emacs magit-status-mode-map (kbd "M-i") 'magit-section-up)

    (evil-define-key 'emacs magit-diff-mode-map (kbd "n") 'evil-backward-char)
    (evil-define-key 'emacs magit-diff-mode-map (kbd "e") 'evil-next-line)
    (evil-define-key 'emacs magit-diff-mode-map (kbd "i") 'evil-previous-line)
    (evil-define-key 'emacs magit-diff-mode-map (kbd "o") 'evil-forward-char)

    (evil-define-key 'emacs magit-diff-mode-map (kbd "S-e") 'magit-section-forward)
    (evil-define-key 'emacs magit-diff-mode-map (kbd "S-i") 'magit-section-backward)

    (evil-define-key 'emacs magit-log-mode-map (kbd "e") 'magit-section-forward)
    (evil-define-key 'emacs magit-log-mode-map (kbd "i") 'magit-section-backward)))

;; ;; Multiple-Cursors
;; (with-load multiple-cursors-autoloads
;;   (with-load evil-leader
;;     (evil-leader/set-key "mt" 'mc/mark-all-like-this-dwim)))

;; Projectile
(with-init! projectile
  (projectile-global-mode t)

  (with-load helm
    (set! projectile-completion-system 'helm))

  (with-init helm-projectile
    (defvar helm-source-file-not-found
      (helm-build-dummy-source
          "Create File"
        :action 'find-file))

    (add-to-list 'helm-projectile-sources-list helm-source-file-not-found t))

  (with-load evil-leader
    (evil-leader/set-key "pl" 'helm-projectile)

    (with-load! grep
    	(evil-leader/set-key "pa" 'helm-projectile-ag)))

  )

(with-init! hydra
  (defun text-scale-reset ()
    (interactive)
    (text-scale-increase 0))

  (defhydra zoom-hydra (:color amaranth :idle 1.0)
    ("e" text-scale-decrease "Decrease Font Size")
    ("i" text-scale-increase "Increase Font Size")
    ("r" text-scale-reset "Reset Font Size")
    ("q" nil "Quit"))

  (with-load evil-leader
    (evil-leader/set-key "z" 'zoom-hydra/body)))

;;; Smartparens
(with-init! smartparens
  (smartparens-global-strict-mode)

  (with-load diminish
    (diminish 'smartparens-mode))

  ;; Global Pairings
  (sp-pair "'" "'" :unless '(sp-point-after-word-p))

  ;; Mode-Specific Pairings
  (sp-with-modes '(emacs-lisp-mode lisp-interaction-mode)
    (sp-local-pair "'" nil :actions nil)
    (sp-local-pair "`" "`" :actions nil)
    (sp-local-pair "`" "'" :when '(sp-in-string-p)))

  (sp-pair "{" nil :post-handlers '(("||\n[i]" "RET")))

  (with-load evil
    (with-load hydra
      (defhydra smartparens-hydra (:color amaranth :idle 1.0 :hint nil)
	"
	     SExp Navigation/Manipulation
───────────────────────────────────────────────────
 {_n_} Previous | {_r_} Raise  | {_sn_} Slurp From Left
 {_e_} Down     | {_k_} Kill   | {_so_} Slurp From Right
 {_i_} Up       |           ^^ | {_bn_} Barf To Left
 {_o_} Next     |           ^^ | {_bo_} Barf To Right
───────────────────────────────────────────────────
 {_u_} Undo     | {_U_} Redo
───────────────────────────────────────────────────
 {_q_} Quit     | {_a_} Append | {_h_} Insert
"
	("n" sp-backward-sexp)
	("i" sp-up-sexp)
	("e" sp-down-sexp)
	("o" sp-forward-sexp)

	("r" sp-raise-sexp)
        ("k" sp-kill-hybrid-sexp)

        ("sn" sp-backward-slurp-sexp)
        ("so" sp-forward-slurp-sexp)

        ("bn" sp-backward-barf-sexp)
        ("bo" sp-forward-barf-sexp)

        ("u" undo-tree-undo)
        ("U" undo-tree-redo)

        ("a" evil-append :color blue)
        ("h" evil-insert :color blue)

	("q" nil))

      (define-key evil-utility-map (kbd "k") 'smartparens-hydra/body))))

(with-init? helm
  (define-key global-map (kbd "M-x") 'helm-M-x)

  (with-load evil-leader
    (evil-leader/set-key "fl" 'helm-find-files))

(with-load hydra
    (defhydra help-hydra (:color blue :idle 1.0 :hint nil)
      "
Heeeeeeeeeelp
-------------
{_a_} Apropos
{_k_} Key
{_q_} Quit
"
      ("a" helm-apropos)
      ("k" describe-key)
      ("q" nil))

    (with-load evil-leader
      (evil-leader/set-key "h" 'help-hydra/body))))

(with-init helm
  ;; Similar to `helm-autoresize-mode`, but keeps the existing splits visible while helm is active.
  (set! helm-split-window-in-side-p t)
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*helm" (* not-newline) "*" eos)
                 (display-buffer-in-side-window)
                 (inhibit-same-window . t)
                 (window-height . 0.4)))

  (define-key helm-map (kbd "C-e") 'helm-next-line)
  (define-key helm-map (kbd "C-i") 'helm-previous-line)

  (define-key helm-map (kbd "<escape>") 'helm-keyboard-quit)
  (define-key helm-map (kbd "<tab>") 'helm-select-action))

(with-init helm-files
  (defun helm-find-files-delete-backward-char-dwim ()
    (interactive)
    (if (looking-back "/")
        (call-interactively 'helm-find-files-up-one-level)
      (delete-backward-char 1)))

  (define-key helm-find-files-map (kbd "<backspace>") 'helm-find-files-delete-backward-char-dwim)

  (defun helm-find-files-navigate-forward-dwim (orig-fun &rest args)
    "Adjust how helm-execute-persistent actions behaves, depending on context"
    (if (file-directory-p (helm-get-selection))
        (apply orig-fun args)
      (helm-maybe-exit-minibuffer)))

  (define-key helm-map (kbd "<return>") 'helm-maybe-exit-minibuffer)
  (define-key helm-map (kbd "RET") 'helm-maybe-exit-minibuffer)
  (define-key helm-find-files-map (kbd "<return>") 'helm-execute-persistent-action)
  (define-key helm-read-file-map (kbd "<return>") 'helm-execute-persistent-action)
  (define-key helm-find-files-map (kbd "RET") 'helm-execute-persistent-action)
  (define-key helm-read-file-map (kbd "RET") 'helm-execute-persistent-action)

  (advice-add 'helm-execute-persistent-action :around #'helm-find-files-navigate-forward-dwim))

;; Undo
(with-init? undo-tree
  (with-load diminish
    (diminish 'undo-tree-mode))

  (with-load evil
    (define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
    (define-key evil-normal-state-map (kbd "U") 'undo-tree-redo)

    (evil-set-initial-state 'undo-tree-visualizer-mode 'emacs)

    (define-key undo-tree-visualizer-mode-map (kbd "n") 'undo-tree-visualize-switch-branch-left)
    (define-key undo-tree-visualizer-mode-map (kbd "e") 'undo-tree-visualize-redo)
    (define-key undo-tree-visualizer-mode-map (kbd "i") 'undo-tree-visualize-undo)
    (define-key undo-tree-visualizer-mode-map (kbd "o") 'undo-tree-visualize-switch-branch-right))

  (with-load evil-leader
    (evil-leader/set-key "u" 'undo-tree-visualize)))

(with-init? prepaint
  (prepaint-global-mode t)
  (face-remap-add-relative 'prepaint-face 'font-lock-variable-name-face))

;; ;;; Volatile Highlights
;; (with-load volatile-highlights-autoloads
;;   (volatile-highlights-mode t)
;;   (with-load diminish
;;     (diminish 'volatile-highlights-mode)))

;; ;;; YASnippet
;; (with-load yasnippet-autoloads
;;   (set! yas-snippet-dirs (list (concat user-emacs-directory "snippets")))
;;   (yas-global-mode))

;; (with-load yasnippet
;;   (with-load diminish
;;     (diminish 'yas-minor-mode))
;;   (set-default 'yas-prompt-functions '(yas-ido-prompt))

;;   (with-load evil
;;     (define-key evil-insert-state-map (kbd "C-o") nil))

;;   ; This is one of the most aggressive keybinds in existence.
;;   (define-key yas-minor-mode-map (kbd "TAB") nil)
;;   (define-key yas-minor-mode-map [(tab)] nil)

;;   (define-key yas-minor-mode-map (kbd "C-o") 'yas-expand))

;; ;;;; Major Modes

;; ;; General Programming Mode configuration.
;; (with-load fic-mode-autoloads
;;   (with-hook 'prog-mode-hook
;;     (turn-on-fic-mode)))

;; (with-load fic-mode
;;   (with-load diminish
;;     (diminish 'fic-mode)))

;; ;; TeX/LaTeX/AucTeX/RefTeX
;; ;; Org-Mode
;; (with-load org-autoloads
;;   (with-load evil-leader
;;     (evil-leader/set-key "oa" 'org-agenda)
;;     (evil-leader/set-key "oc" 'org-capture)))

;; (with-load org

;;   (set! org-log-into-drawer "LOG")

;;   (set! org-refile-use-outline-path 'file)
;;   (set! org-refile-targets '((org-agenda-files :maxlevel . 9)))

;;   ; Predominantly, I want to start capture typing text, not commands.
;;   (with-hook 'org-capture-mode-hook
;;       (evil-insert-state))


;;   ;; Org-Babel
;;   (org-babel-do-load-languages
;;    'org-babel-load-languages
;;    '((calc . t)
;;      (sh . t)))

;;   (with-load ob-sh
;;     (if (executable-find "zsh")
;;         (set! org-babel-sh-command "zsh")))

;;   ; (add-to-list 'evil-emacs-state-modes 'org-agenda-mode)

;; ;; TODO: Handle loading through autoloads.
;; (with-load rainbow-mode
;;   (diminish 'rainbow-mode))

;; ;; (with-load rust-mode
;; ;;   (with-load flycheck
;; ;;     (with-load flycheck-rust-autoloads
;; ;;       (flycheck-rust-setup))))

;; (with-load scss-mode
;;   (with-load rainbow-mode
;;     (with-hook 'scss-mode-hook
;;       (rainbow-mode t))))

(provide 'init)

;;; Local Variables:
;;; flycheck-disabled-checkers: (emacs-lisp-checkdoc emacs-lisp)
;;; End:

;;; init.el ends here
