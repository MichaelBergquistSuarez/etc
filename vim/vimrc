" .vimrc file.
" P.C. Shyamshankar <sykora@lucentbeing.com>

" Pathogen calls to hack runtime path.
call pathogen#infect()

" Set up some keys.
let mapleader = ' '
source ~/etc/vim/colemak.vim

" Let's find out where we are.
filetype plugin indent on
syntax enable

" Set the colorscheme.
if &t_Co == 256
    colorscheme skywave
endif

" Some general options.
set modeline " Allow vim to interpret modelines, to determine per-file options.
set mouse=a " Enable mouse on all modes.
set formatoptions=t,c,r,o,q,n,l " Various hints for automatic formatting.
set virtualedit=block " Allow choosing perfect rectangles in Visual Block mode.

set textwidth=100 " An arbitrarily good number, based on my common working resolution.

" Windowing
set splitright " Open horizontally split windows to the right of the current window.
set splitbelow " Open vertically split windows to below the current window.
set laststatus=2 " Always show a status bar.

" The Title String
set title
set titlestring=vim:\ %F\ %m

" 21. Command Line Editing

set history=100

set wildchar=<Tab>  " Key used to start command-line completion.
set wildmode=full   " On multiple matches, list all, complete longest, then full.
set wildmenu        " Shows matches above the command line.

set wildignore+=*.swp,*.un~ " Ignore vim's temporaries.
set wildignore+=*.a,*.o     " Ignore standard build artifacts.
set wildignore+=*.cmo,*.cmi " Ignore OCaml's build artifacts
set wildignore+=*.pdf,*.dvi " Ignore prepared documents (common with LaTeX).
set wildignore+=*.class     " Ignore Java class files.
set wildignore+=*.hi        " Ignore Haskell interface files.
set wildignore+=*.pyc       " Ignore Python byte-code.

set cedit=<F2>  " Key used to open command-line edit buffer.

set undofile    " Allow persistent undos.

" Display

set wrap " Wrap long lines, instead of cutting them off, or making me scroll.
set linebreak " Wrap lines at words or punctuation, rather than in the middle.
set number " Show line numbers.

" Indent
set tabstop=4 " Number of spaces that a <Tab> counts for, when inserted through indent.
set softtabstop=4 " Number of spaces that a <Tab> counts for, when _you_ insert it.
set shiftwidth=4 " Number of spaces used for each indentation, <<, >>, etc.
set expandtab " Always use spaces instead of tabs.
set smarttab " Automatically detect if you want to delete a <Tab>'s worth of spaces.
set autoindent " Automatically indent the next line the same as the current line.

" Search
set ignorecase " Be case insensitive while searching.
set smartcase " Except when there are upper-case letters in the search term.
set incsearch " Highlight matches as the term is typed.
set nohlsearch " Don't highlight matches afterwards.

" Corrections for common mistakes.
command! W w
command! Q q
command! Wq wq

" The StatusLine

let g:statusline = "%1*%n:%f%0* %2*[%{strlen(&ft)?&ft:'none'}]%0* %3*%{fugitive#statusline()}%0* %4*%m%r%w%0*%=%5*(%l, %v)%0* %6*<0x%04.4B>%0* %7*%P%0*"
let g:statuslinenc = "%n:%f [%{strlen(&ft)?&ft:'none'}] %{fugitive#statusline()} %m%r%w%=(%l, %v) <0x%04.4B> %P"

au BufEnter,WinEnter * let &l:statusline = g:statusline
au BufLeave,WinLeave * let &l:statusline = g:statuslinenc

" Script specific settings

let g:NERDSpaceDelims = 1

let g:surround_no_mappings = 1

let g:syntastic_check_on_open = 1

let g:ctrlp_map = '<leader>p'
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|\.hsenv.*$\|dist.*$'
let g:ctrlp_working_path_mode = 'ra'

let g:LatexBox_no_mappings = 1

let g:ctrlp_prompt_mappings = {
\   'PrtClearCache()': ['<F5>'],
\}

let g:UltiSnipsExpandTrigger = "<C-o>"
let g:UltiSnipsJumpForwardTrigger = "<C-o>"
